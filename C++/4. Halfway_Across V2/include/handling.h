#ifndef HANDLING_H
#define HANDLING_H
#include "../include/mainwindow.h"

#define NUM_OF_ARG_VERBS 26
#define NUM_OF_NO_ARG_VERBS 5

class handling {
public:
    bool validateVerb(QString input);
    void splitInput(MainWindow *mainWindow, QString input);
private:
    void handleVerb(MainWindow *mainWindow, QString verb, QString target, QString location);
    void ask(MainWindow *mainWindow, QString target, QString location);
    void askCamp(MainWindow *mainWindow, QString target);
    void askCampPath(MainWindow *mainWindow, QString target);
    void askCave(MainWindow *mainWindow, QString target);
    void askCaveEntrance(MainWindow *mainWindow, QString target);
    void askLake(MainWindow *mainWindow, QString target);
    void askValley(MainWindow *mainWindow, QString target);
    void attack(MainWindow *mainWindow, QString target, QString location);
    void attackCamp(MainWindow *mainWindow, QString target);
    void attackCampPath(MainWindow *mainWindow, QString target);
    void attackCave(MainWindow *mainWindow, QString target);
    void attackCaveEntrance(MainWindow *mainWindow, QString target);
    void attackLake(MainWindow *mainWindow, QString target);
    void attackValley(MainWindow *mainWindow, QString target);
    void begin(MainWindow *mainWindow, QString target, QString location);
    void burn(MainWindow *mainWindow, QString target, QString location);
    void burnCamp(MainWindow *mainWindow, QString target);
    void burnCampPath(MainWindow *mainWindow, QString target);
    void burnCave(MainWindow *mainWindow, QString target);
    void burnCaveEntrance(MainWindow *mainWindow, QString target);
    void burnLake(MainWindow *mainWindow, QString target);
    void burnValley(MainWindow *mainWindow, QString target);
    void chisel(MainWindow *mainWindow, QString target, QString location);
    void chiselCamp(MainWindow *mainWindow, QString target);
    void chiselCampPath(MainWindow *mainWindow, QString target);
    void chiselCave(MainWindow *mainWindow, QString target);
    void chiselCaveEntrance(MainWindow *mainWindow, QString target);
    void chiselLake(MainWindow *mainWindow, QString target);
    void chiselValley(MainWindow *mainWindow, QString target);
    void cut(MainWindow *mainWindow, QString target, QString location);
    void cutCamp(MainWindow *mainWindow, QString target);
    void cutCampPath(MainWindow *mainWindow, QString target);
    void cutCave(MainWindow *mainWindow, QString target);
    void cutCaveEntrance(MainWindow *mainWindow, QString target);
    void cutLake(MainWindow *mainWindow, QString target);
    void cutValley(MainWindow *mainWindow, QString target);
    void drink(MainWindow *mainWindow, QString target, QString location);
    void drinkCamp(MainWindow *mainWindow, QString target);
    void drinkCampPath(MainWindow *mainWindow, QString target);
    void drinkCave(MainWindow *mainWindow, QString target);
    void drinkCaveEntrance(MainWindow *mainWindow, QString target);
    void drinkLake(MainWindow *mainWindow, QString target);
    void drinkValley(MainWindow *mainWindow, QString target);
    void examine(MainWindow *mainWindow, QString target, QString location);
    void examineCamp(MainWindow *mainWindow, QString target);
    void examineCampPath(MainWindow *mainWindow, QString target);
    void examineCave(MainWindow *mainWindow, QString target);
    void examineCaveEntrance(MainWindow *mainWindow, QString target);
    void examineLake(MainWindow *mainWindow, QString target);
    void examineValley(MainWindow *mainWindow, QString target);
    void give(MainWindow *mainWindow, QString target, QString location);
    void giveCamp(MainWindow *mainWindow, QString target);
    void giveCampPath(MainWindow *mainWindow, QString target);
    void giveCave(MainWindow *mainWindow, QString target);
    void giveCaveEntrance(MainWindow *mainWindow, QString target);
    void giveLake(MainWindow *mainWindow, QString target);
    void giveValley(MainWindow *mainWindow, QString target);
    void knock(MainWindow *mainWindow, QString target, QString location);
    void knockCamp(MainWindow *mainWindow, QString target);
    void knockCampPath(MainWindow *mainWindow, QString target);
    void knockCave(MainWindow *mainWindow, QString target);
    void knockCaveEntrance(MainWindow *mainWindow, QString target);
    void knockLake(MainWindow *mainWindow, QString target);
    void knockValley(MainWindow *mainWindow, QString target);
    void look(MainWindow *mainWindow, QString target, QString location);
    void lookCamp(MainWindow *mainWindow, QString target);
    void lookCampPath(MainWindow *mainWindow, QString target);
    void lookCave(MainWindow *mainWindow, QString target);
    void lookCaveEntrance(MainWindow *mainWindow, QString target);
    void lookLake(MainWindow *mainWindow, QString target);
    void lookValley(MainWindow *mainWindow, QString target);
    void move(MainWindow *mainWindow, QString target, QString location);
    void moveCamp(MainWindow *mainWindow, QString target);
    void moveCampPath(MainWindow *mainWindow, QString target);
    void moveCave(MainWindow *mainWindow, QString target);
    void moveCaveEntrance(MainWindow *mainWindow, QString target);
    void moveLake(MainWindow *mainWindow, QString target);
    void moveValley(MainWindow *mainWindow, QString target);
    void open(MainWindow *mainWindow, QString target, QString location);
    void openCamp(MainWindow *mainWindow, QString target);
    void openCampPath(MainWindow *mainWindow, QString target);
    void openCave(MainWindow *mainWindow, QString target);
    void openCaveEntrance(MainWindow *mainWindow, QString target);
    void openLake(MainWindow *mainWindow, QString target);
    void openValley(MainWindow *mainWindow, QString target);
    void read(MainWindow *mainWindow, QString target, QString location);
    void readCamp(MainWindow *mainWindow, QString target);
    void readCampPath(MainWindow *mainWindow, QString target);
    void readCave(MainWindow *mainWindow, QString target);
    void readCaveEntrance(MainWindow *mainWindow, QString target);
    void readLake(MainWindow *mainWindow, QString target);
    void readValley(MainWindow *mainWindow, QString target);
    void shoot(MainWindow *mainWindow, QString target, QString location);
    void shootCamp(MainWindow *mainWindow, QString target);
    void shootCampPath(MainWindow *mainWindow, QString target);
    void shootCave(MainWindow *mainWindow, QString target);
    void shootCaveEntrance(MainWindow *mainWindow, QString target);
    void shootLake(MainWindow *mainWindow, QString target);
    void shootValley(MainWindow *mainWindow, QString target);
    void sit(MainWindow *mainWindow, QString target, QString location);
    void sitCamp(MainWindow *mainWindow, QString target);
    void sitCampPath(MainWindow *mainWindow, QString target);
    void sitCave(MainWindow *mainWindow, QString target);
    void sitCaveEntrance(MainWindow *mainWindow, QString target);
    void sitLake(MainWindow *mainWindow, QString target);
    void sitValley(MainWindow *mainWindow, QString target);
    void sleep(MainWindow *mainWindow, QString target, QString location);
    void sleepCamp(MainWindow *mainWindow, QString target);
    void take(MainWindow *mainWindow, QString target, QString location);
    void takeCamp(MainWindow *mainWindow, QString target);
    void takeCampPath(MainWindow *mainWindow, QString target);
    void takeCave(MainWindow *mainWindow, QString target);
    void takeCaveEntrance(MainWindow *mainWindow, QString target);
    void takeLake(MainWindow *mainWindow, QString target);
    void takeValley(MainWindow *mainWindow, QString target);
    void tell(MainWindow *mainWindow, QString target, QString location);
    void tellCamp(MainWindow *mainWindow, QString target);
    void tellCampPath(MainWindow *mainWindow, QString target);
    void tellCave(MainWindow *mainWindow, QString target);
    void tellCaveEntrance(MainWindow *mainWindow, QString target);
    void tellLake(MainWindow *mainWindow, QString target);
    void tellValley(MainWindow *mainWindow, QString target);
    void toss(MainWindow *mainWindow, QString target, QString location);
    void tossCamp(MainWindow *mainWindow, QString target);
    void tossCampPath(MainWindow *mainWindow, QString target);
    void tossCave(MainWindow *mainWindow, QString target);
    void tossCaveEntrance(MainWindow *mainWindow, QString target);
    void tossLake(MainWindow *mainWindow, QString target);
    void tossValley(MainWindow *mainWindow, QString target);
    void use(MainWindow *mainWindow, QString target, QString location);
    void useCamp(MainWindow *mainWindow, QString target);
    void useCampPath(MainWindow *mainWindow, QString target);
    void useCave(MainWindow *mainWindow, QString target);
    void useCaveEntrance(MainWindow *mainWindow, QString target);
    void useLake(MainWindow *mainWindow, QString target);
    void useValley(MainWindow *mainWindow, QString target);
    void wait(MainWindow *mainWindow, QString target, QString location);
    void waitCamp(MainWindow *mainWindow, QString target);
    void waitCampPath(MainWindow *mainWindow, QString target);
    void waitCave(MainWindow *mainWindow, QString target);
    void waitCaveEntrance(MainWindow *mainWindow, QString target);
    void waitLake(MainWindow *mainWindow, QString target);
    void waitValley(MainWindow *mainWindow, QString target);
};
extern handling handle;

extern const char *argVerbs[NUM_OF_ARG_VERBS];
extern const char *noArgVerbs[NUM_OF_NO_ARG_VERBS];

#endif // HANDLING_H
